from fastapi import APIRouter, Depends, HTTPException
from fastapi.security import OAuth2PasswordRequestForm
from sqlalchemy.orm import Session
from schemas.user import UserCreate, UserOut
from crud.user import get_user_by_email, create_user
from db.database import get_db
from security.user import hash_password, verify_password
from schemas.token import Token
from models.user import User
from security.auth import create_access_token
from api.dependencies import get_current_user
from models import user


router = APIRouter()

@router.post("/register", response_model=Token)
def register(user_in: UserCreate, db: Session = Depends(get_db)):
    #–ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –Ω–∞—à –µ–º–µ–π–ª –Ω–µ –∑–∞–Ω—è—Ç
    db_user = get_user_by_email(db, user_in.email)
    if db_user:
        raise HTTPException(status_code=400, detail="Email —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º username –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    existing_username = db.query(User).filter(User.username == user_in.username).first()
    if existing_username:
        raise HTTPException(status_code=400, detail="Username —É–∂–µ –∑–∞–Ω—è—Ç")

    # –•–µ—à–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª—å
    hashed_password = hash_password(user_in.password)

    # –°–æ–∑–¥–∞—ë–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    new_user = User(
        username=user_in.username,
        email=user_in.email,
        hashed_password=hashed_password
    )
    db.add(new_user)
    db.commit()
    db.refresh(new_user)

    # –ì–µ–Ω–µ—Ä–∏–º —Ç–æ–∫–µ–Ω
    token = create_access_token(data={"sub": str(new_user.id)})

    return {
        "access_token": token,
        "token_type": "bearer"
    }

@router.post("/login", response_model=Token)
def login_user(form_data: OAuth2PasswordRequestForm = Depends(), db: Session = Depends(get_db)):
    user = db.query(User).filter(User.username == form_data.username).first()
    if not user:
        print("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
    else:
        print(f"üîê –ò–∑ –ë–î: {user.username}, {user.hashed_password}")
        print("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è:", verify_password(form_data.password, user.hashed_password))


    if not user or not verify_password(form_data.password, user.hashed_password):
        raise HTTPException(status_code=401, detail="Invalid Credentials")
    
    token = create_access_token(data={"sub": str(user.id)})
    return {"access_token": token, "token_type": "bearer"}


@router.get("/me", tags=["users"])
def read_current_user(current_user: User = Depends(get_current_user)):
    return {
        "id": current_user.id,
        "email": current_user.email,
        "username": current_user.username
    }
